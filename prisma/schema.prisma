// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  userBooks     UserBook[]
  reviews       Review[]
  lists         List[]
  followers     Follows[] @relation("following")
  following     Follows[] @relation("follower")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  isbn        String?  @unique
  coverImage  String?
  description String?  @db.Text
  pageCount   Int?
  publishDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  googleBooksId String? @unique
  viewCount   Int      @default(0)
  reviewCount Int      @default(0)
  averageRating Float?
  trendingScore Float?  @default(0)

  reviews Review[]
  lists   ListBook[]
  categories Category[]
  userBooks UserBook[]
  trendingMetrics TrendingMetrics?
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
}

model List {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  books ListBook[]
}

model ListBook {
  id        String   @id @default(cuid())
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String

  @@unique([listId, bookId])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model UserBook {
  id        String   @id @default(cuid())
  status    String
  progress  Int      @default(0)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String

  @@unique([userId, bookId])
}

model TrendingMetrics {
  id            String   @id @default(cuid())
  viewsLast24h  Int      @default(0)
  viewsLast7d   Int      @default(0)
  reviewsLast7d Int      @default(0)
  updatedAt     DateTime @updatedAt

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}
